#!/usr/bin/env node
const { program } = require("commander");
const fs = require("fs");
const path = require("path");
const { readGitignore, traverseAndCopy } = require("../index");

program
  .option("--ignore-files <files...>", "Files to ignore (comma-separated)")
  .option(
    "--ignore-folders <folders...>",
    "Folders to ignore (comma-separated)"
  )
  .option(
    "--ignore-exts <extensions...>",
    "File extensions to ignore (comma-separated)"
  )
  .option("-o, --output <file>", "Output file name")
  .parse(process.argv);

const options = program.opts();
const ignoreFiles = options.ignoreFiles || [];
const ignoreFolders = options.ignoreFolders || [];
const ignoreExtensions = options.ignoreExts
  ? options.ignoreExts.map((ext) => ext.toLowerCase())
  : [];
const outputFile = options.output || "repo-contents.txt";

// Check and delete existing output file
if (fs.existsSync(outputFile)) {
  try {
    fs.unlinkSync(outputFile);
    console.log(`Existing ${outputFile} deleted.`);
  } catch (err) {
    console.error(`Error deleting ${outputFile}:`, err);
    process.exit(1);
  }
}

// Default ignore patterns
const defaultIgnorePatterns = [
  ".git/**",
  "**/.*", // Hidden files
  "**/*.mp4",
  "**/*.mkv",
  "**/*.avi",
  "**/*.mov",
  "**/*.wmv",
  "**/*.zip",
  "**/*.rar",
  "**/*.tgz",
];

// Get ignore patterns from .gitignore and combine with command-line options
const gitignorePatterns = readGitignore();
const ignorePatterns = [
  ...new Set([
    ...defaultIgnorePatterns,
    ...gitignorePatterns,
    ...ignoreFiles,
    ...ignoreFolders.map((folder) => `${folder}/**`),
  ]),
];

// Normalize the patterns to ensure they work correctly
const normalizedIgnorePatterns = ignorePatterns.map((pattern) => {
  if (pattern.startsWith("/")) {
    return pattern.substring(1);
  }
  return pattern;
});

// Call traverseAndCopy and get the output
traverseAndCopy(process.cwd(), normalizedIgnorePatterns, ignoreExtensions)
  .then((output) => {
    // Write the output to the file
    fs.writeFile(outputFile, output, (err) => {
      if (err) {
        console.error(`Error writing to ${outputFile}:`, err);
        process.exit(1);
      }
      console.log(`Repository contents copied to ${outputFile}`);
    });
  })
  .catch((err) => {
    console.error(`Error traversing and copying files:`, err);
    process.exit(1);
  });
